#define BLYNK_TEMPLATE_ID "TMPL3nBifyRgo" 
#define BLYNK_DEVICE_NAME "SOLAR PANEL FINAL" 
#define BLYNK_AUTH_TOKEN "_Y6PToyfgCYAoV1iQwL
_b5VyqWlsJMQ" 
#define BLYNK_TEMPLATE_NAME "SOLAR PANEL FINAL" 
#include <WiFi.h> 
#include <WiFiClient.h> 
#include <BlynkSimpleEsp32.h> 
#include "DHT.h" 
#include <ESP32Servo.h>  // Replaced Servo.h with ESP32Servo.h 
// WiFi credentials 
char ssid[] = "IQOO Z7s 5G"; 
char pass[] = "arunpavi"; 
// DHT11 Sensor Configuration 
#define DHTPIN 4      
 // Digital pin connected to the DHT sensor 
#define DHTTYPE DHT11  // DHT 11 sensor type 
DHT dht(DHTPIN, DHTTYPE); 
// Voltage Divider Pin and Resistor Values 
#define VOLTAGE_DIVIDER_PIN 36 // Pin for voltage divider 
(ADC1_CHANNEL0) 
#define R1 1000.0             
#define R2 1000.0             
// Resistance of R1 in Ohms (10kΩ) 
// Resistance of R2 in Ohms (10kΩ) 
const float calibrationFactor = 1.05; // Optional calibration factor 
// LDR Pins 
const int ldrPin1 = 32; 
const int ldrPin2 = 33; 
const int ldrPin3 = 34; 
const int ldrPin4 = 35; 
const int numLDRs = 4; // Number of LDRs 
// Servo Motor Pin 
const int servoPin = 13; // Pin where the servo is connected 
Servo myServo; // Create Servo object using ESP32Servo 
// Blynk Virtual Pins 
#define VIRTUAL_PIN_AVG_LDR V1 
#define VIRTUAL_PIN_TEMPERATURE V2 
#define VIRTUAL_PIN_HUMIDITY V3 
#define VIRTUAL_PIN_VOLTAGE V4 
BlynkTimer timer;
void setup() { 
// Start Serial Monitor 
Serial.begin(115200); 
// Connect to WiFi 
WiFi.begin(ssid, pass); 
while (WiFi.status() != WL_CONNECTED) { 
delay(1000); 
Serial.println("Connecting to WiFi..."); 
} 
Serial.println("Connected to WiFi"); 
// Connect to Blynk 
Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass); 
// Initialize the DHT sensor 
dht.begin(); 
// Initialize the Servo motor 
myServo.attach(servoPin); 
// Set up a timer to call sendSensorData every second 
timer.setInterval(1000L, sendSensorData); 
} 
void loop() {
Blynk.run(); 
timer.run(); 
} 
// Function to read the voltage from the voltage divider circuit 
float readVoltage() { 
int analogValue = analogRead(VOLTAGE_DIVIDER_PIN); 
float voltage = (analogValue / 4095.0) * 3.3; // Convert to voltage 
voltage = voltage * ((R1 + R2) / R2);         
values 
voltage *= calibrationFactor;                 
needed 
return voltage; 
} 
// Adjust based on resistor 
// Apply calibration factor if 
// Function to control the servo motor when voltage drops below 1V 
void controlServo(float voltage) { 
if (voltage < 1.0) { // If the voltage drops below 1V 
Serial.println("Voltage is below 1V, rotating servo..."); 
myServo.write(90);  // Rotate servo to 90 degrees (you can change the 
angle) 
delay(5000);        
// Wait for 5 seconds 
myServo.write(0);   // Rotate back to 0 degrees 
} 
}
// Function to read LDR values, DHT11 sensor data, and voltage, and send 
them to Blynk 
void sendSensorData() { 
// Array to store LDR readings 
int ldrValues[numLDRs] = {0}; 
// Read from each LDR and store the values 
ldrValues[0] = analogRead(ldrPin1); 
ldrValues[1] = analogRead(ldrPin2); 
ldrValues[2] = analogRead(ldrPin3); 
ldrValues[3] = analogRead(ldrPin4); 
// Calculate the average LDR reading 
int averageLDR = 0; 
for (int i = 0; i < numLDRs; i++) { 
averageLDR += ldrValues[i]; 
} 
averageLDR /= numLDRs; 
// Read temperature and humidity from DHT11 sensor 
float temperature = dht.readTemperature(); 
float humidity = dht.readHumidity(); 
// Check if any DHT11 reads failed and exit early if so 
if (isnan(humidity) || isnan(temperature)) { 
Serial.println("Failed to read from DHT sensor!");
return; 
} 
// Read voltage from the voltage divider 
float panelVoltage = readVoltage(); 
// Control servo based on the voltage 
controlServo(panelVoltage); 
// Send data to Blynk 
Blynk.virtualWrite(VIRTUAL_PIN_AVG_LDR, averageLDR); 
Blynk.virtualWrite(VIRTUAL_PIN_TEMPERATURE, temperature); 
Blynk.virtualWrite(VIRTUAL_PIN_HUMIDITY, humidity); 
Blynk.virtualWrite(VIRTUAL_PIN_VOLTAGE, panelVoltage); 
// Print values to Serial Monitor 
Serial.print("Average LDR: "); 
Serial.print(averageLDR); 
Serial.print(", Temperature: "); 
Serial.print(temperature); 
Serial.print(" °C, Humidity: "); 
Serial.print(humidity); 
Serial.print(" %, Voltage: "); 
Serial.print(panelVoltage); 
Serial.println(" V"); 
}
